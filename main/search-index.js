var searchIndex = JSON.parse('{\
"lrumap":{"doc":"A set of safe Least-Recently-Used (LRU) cache types aimed …","t":[3,13,3,3,3,8,13,4,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12],"n":["EntryRef","Evicted","Iter","LruBTreeMap","LruHashMap","LruMap","PreviousValue","Removed","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","entry","entry","entry","entry","entry","eq","equivalent","extend","extend","extend","extend","extend","fmt","fmt","fmt","fmt","from","from","from","from","from","get","get","get","get","get","get_mut","get_without_update","get_without_update","get_without_update","get_without_update","get_without_update","head","head","head","into","into","into","into","into","into_iter","into_iter","into_iter","is_empty","iter","iter","iter","iter","key","len","len","len","most_recent_in_range","most_recent_in_range_where","move_next","move_previous","new","new","new","new","new","next","next_back","peek_value","push","push","push","push","push","remove_moving_next","remove_moving_previous","staleness","tail","tail","tail","take","take_and_move_next","take_and_move_previous","touch","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value","with_hasher","0","0","1"],"q":["lrumap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lrumap::Removed","",""],"d":["A reference to an entry in a Least Recently Used map.","An entry was evicted to make room for the key that was …","A double-ended iterator over a cache’s keys and values …","A Least Recently Used map with fixed capacity that stores …","A Least Recently Used map with fixed capacity that stores …","A Least Recently Used map interface that supports all map …","The previously stored value for the key that was written …","A removed value or entry.","","","","","","","","","","","Returns an <code>EntryRef</code> for <code>key</code>, if present.","","Returns an <code>EntryRef</code> for <code>key</code>, if present.","","Returns an <code>EntryRef</code> for <code>key</code>, if present.","","","Pushes all items from <code>iterator</code> into this map. If there are …","","Pushes all items from <code>iterator</code> into this map. If there are …","Pushes all items from <code>iterator</code> into this map. If there are …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the stored value for <code>key</code>, if present.","","Returns the stored value for <code>key</code>, if present.","Returns the stored value for <code>key</code>, if present.","","Returns the stored value for <code>key</code>, if present.","Returns the stored value for <code>key</code>, if present.","","Returns the stored value for <code>key</code>, if present.","","Returns the stored value for <code>key</code>, if present.","Returns a reference to the most recently used key.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Retruns true if this map contains no keys.","Returns an iterator over the keys and values in order from …","","Returns an iterator over the least-recently used keys …","","Returns the key of this entry.","Returns the number of keys present in this map.","","","Returns the most recently touched entry with a key within …","Returns the most recently touched entry with a key within …","Updates this reference to point to the next least recently …","Updates this reference to point to the next most recently …","Creates a new map with the maximum <code>capacity</code>.","","Creates a new map with the maximum <code>capacity</code>.","","Creates a new map with the maximum <code>capacity</code>.","","","Returns the value of this entry.","Inserts <code>value</code> for <code>key</code> into this map. If a value is already …","Inserts <code>value</code> for <code>key</code> into this map. If a value is already …","","Inserts <code>value</code> for <code>key</code> into this map. If a value is already …","","Removes the current entry. If this was not the last entry, …","Removes the current entry. If this was not the first …","Returns the number of changes to the cache since this key …","Returns a reference to the least recently used key.","","","Removes and returns the current entry’s key and value.","Removes and returns the current entry’s key and value. …","Removes and returns the current entry’s key and value. …","Touches this key, making it the most recently used key.","","","","","","","","","","","","","","","","Returns the value of this entry.","Creates a new map with the maximum <code>capacity</code> and <code>hasher</code>.","","",""],"i":[0,7,0,0,0,0,7,0,13,4,1,7,5,13,4,1,7,5,17,4,4,5,5,7,7,17,4,4,5,5,4,1,7,5,13,4,1,7,5,17,4,4,5,5,4,17,4,4,5,5,17,4,5,13,4,1,7,5,13,4,5,17,17,4,1,5,1,17,4,5,5,5,1,1,17,4,4,5,5,13,13,1,17,4,4,5,5,1,1,1,17,4,5,1,1,1,1,13,4,1,7,5,13,4,1,7,5,13,4,1,7,5,1,4,18,19,19],"f":[0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[2,[1]]]],[[[4,[3]]],[[2,[[1,[[4,[3]]]]]]]],[4,[[2,[[1,[4]]]]]],[5,[[2,[[1,[5]]]]]],[5,[[2,[[1,[5]]]]]],[[[7,[6,6]],7],8],[[],8],[9],[[[4,[3]],9]],[[4,9]],[[5,9]],[[5,9]],[[[4,[10,10,10]],11],12],[[[1,[10,10,10]],11],12],[[[7,[10,10]],11],12],[[[5,[10,10]],11],12],[[]],[[]],[[]],[[]],[[]],[[],2],[[[4,[3]]],2],[4,2],[5,2],[5,2],[4,2],[[],2],[[[4,[3]]],2],[4,2],[5,2],[5,2],[[],[[2,[1]]]],[[[4,[3]]],[[2,[[1,[[4,[3]]]]]]]],[5,[[2,[[1,[5]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[4],[5],[[],8],[[],13],[[[4,[3]]],13],[1,13],[5,13],[1],[[],14],[[[4,[3]]],14],[5,14],[5,[[2,[[1,[5]]]]]],[5,[[2,[[1,[5]]]]]],[1,8],[1,8],[14],[14,[[4,[3]]]],[14,[[4,[3]]]],[14,5],[14,5],[13,2],[13,2],[1],[[],[[2,[7]]]],[4,[[2,[7]]]],[[[4,[3]]],[[2,[7]]]],[5,[[2,[7]]]],[5,[[2,[7]]]],[1,[[2,[1]]]],[1,[[2,[1]]]],[1,14],[[],[[2,[1]]]],[[[4,[3]]],[[2,[[1,[[4,[3]]]]]]]],[5,[[2,[[1,[5]]]]]],[1],[1],[1],[1],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[1],[14,4],0,0,0],"p":[[3,"EntryRef"],[4,"Option"],[6,"DefaultHashBuilder"],[3,"LruHashMap"],[3,"LruBTreeMap"],[8,"PartialEq"],[4,"Removed"],[15,"bool"],[8,"IntoIterator"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"Iter"],[15,"usize"],[4,"Result"],[3,"TypeId"],[8,"LruMap"],[13,"PreviousValue"],[13,"Evicted"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
